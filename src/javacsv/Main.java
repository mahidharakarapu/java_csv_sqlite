/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javacsv;

import java.awt.HeadlessException;
import java.io.*;
import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author thecarisma
 */
public class Main extends javax.swing.JFrame {
    
    JFileChooser fileChooser ;
    File currentMediaFile = null;
    Connection c = null;
    ArrayList csvRecord = new ArrayList();

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        fileChooser = new JFileChooser();
        fileChooser.setApproveButtonText("Select");
        jTextField2.setText(System.getProperty("user.dir"));
        jTabbedPane1.setTitleAt(0, " Log View ");
        jTabbedPane1.setTitleAt(1, " SQlite DataBase ");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jTextField3 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setEditable(false);

        jLabel1.setText("SELECT CSV FILE : ");

        jLabel2.setText("..................");

        jButton2.setText("Process File");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setText("LOG FOLDER : ");

        jTextField2.setEditable(false);

        jButton3.setText("...");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Write To SQLite DB");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTabbedPane1.addTab("tab1", jScrollPane1);

        jButton5.setText("...");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel4.setText("SELECT OR ENTER NEW DATABASE NAME : ");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("tab2", jPanel2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTabbedPane1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int status = fileChooser.showOpenDialog(rootPane); 
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (status == JFileChooser.APPROVE_OPTION) {
            try {
                if (fileChooser.getSelectedFile().getName().endsWith("csv")) {
                    currentMediaFile = fileChooser.getSelectedFile();
                    jTextField1.setText(currentMediaFile.getAbsolutePath());
                    jTextField2.setText(currentMediaFile.getParent());
                    jTextField3.setText(currentMediaFile.getAbsolutePath()+".db");
                    jLabel2.setText("You selected : "+currentMediaFile.getAbsolutePath());
                    jButton2.setEnabled(true);
                } else {
                    JOptionPane.showMessageDialog(this, "Please select a CSV file only", "Invalid CSV File", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            jLabel2.setText("No file selected");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String csvFile = currentMediaFile.getAbsolutePath();
        String line = "", comma = ","; 
        File tempFile = new File(jTextField2.getText()+"/"+currentMediaFile.getName()+".txt"); 
        int numberReceived = 0, numberSuccessful = 0, numberFailed = 0 ;
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        try (BufferedReader br = new BufferedReader(new FileReader(csvFile))) {
            FileOutputStream fos = new FileOutputStream(tempFile,true);
            String val = "\n\n["+dateFormat.format(new Date())+"]: Process File : "+currentMediaFile.getName()+"\n"+csvFile+"\n";
            jTextArea1.append(val); fos.write(val.getBytes());
            while ((line = br.readLine()) != null) {
                String[] record = line.split(comma);
                if (record.length >= 10 ) {
                    val = "["+dateFormat.format(new Date())+"]: Successful/Column Complete : "+line+"\n";
                    jTextArea1.append(val); fos.write(val.getBytes());
                    numberSuccessful++;
                    csvRecord.add(line);
                } else {
                    val = "["+dateFormat.format(new Date())+"]: Failed/Incomplete Column : "+line+"\n";
                    jTextArea1.append(val); fos.write(val.getBytes());
                    numberFailed++;
                }
                numberReceived++;
            }
            val = "["+dateFormat.format(new Date())+"]: Total Received - "+numberReceived+" : Total Successful - "+numberSuccessful
            +" : Total Failes - "+numberFailed+"\n";
            jTextArea1.append(val);
            fos.write(val.getBytes());
            jLabel2.setText(currentMediaFile.getName()+" completely processed ");
            jButton4.setEnabled(true);
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int status = fileChooser.showOpenDialog(rootPane); 
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (status == JFileChooser.APPROVE_OPTION) {
            try {
                jTextField2.setText(fileChooser.getSelectedFile().getAbsolutePath());
                jLabel2.setText("Your destination : "+fileChooser.getSelectedFile().getAbsolutePath());
            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            jLabel2.setText("No folder selected");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            File file = new File(jTextField3.getText());
            boolean databaseExist = file.exists();
            System.out.println("It does noet ? "+databaseExist+" of "+file.length());
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite:"+jTextField3.getText());
            c.setAutoCommit(false);
            writeToLogFile(jTextField2.getText()+"/"+currentMediaFile.getName()+".txt","SQLite Database", "Opened database Successful");
            if (!databaseExist || file.length() == 0 ) {
                Statement stmt = c.createStatement();
                String sql = "CREATE TABLE X " +
                               "(A TEXT NOT NULL," +
                               " B  TEXT," + 
                               " C  TEXT," + 
                               " D  TEXT," + 
                               " E  TEXT," + 
                               " F  TEXT," + 
                               " G  TEXT," + 
                               " H  TEXT," + 
                               " I  TEXT," + 
                               " J  TEXT    )"; 
                stmt.executeUpdate(sql);
                stmt.close();
                writeToLogFile(jTextField2.getText()+"/"+currentMediaFile.getName()+".txt","SQLite Database", "Sucessfully created Table X in Database");
            }
            fetchFromDB(c);
            Statement stmt = c.createStatement();
            for (int a = 0; a < csvRecord.size();a++) {
                String[] record = ((String)csvRecord.get(a)).split(",");
                String sql = "INSERT INTO X(A,B,C,D,E,F,G,H,I,J) " +
                           "VALUES ('"+record[0]+"','"+record[1]+"','"+record[2]+"','"+record[3]+"','"+record[4]+"',"
                        + "'"+record[5]+"','"+record[6]+"','"+record[7]+"','"+record[8]+"','"+record[9]+"');"; 
                stmt.executeUpdate(sql);
            }
            
            stmt.close();
            fetchFromDB(c);
            c.commit();
            c.close();
        } catch ( Exception e ) {
            try {
                writeToLogFile(jTextField2.getText()+"/"+currentMediaFile.getName()+".txt","SQLite Database", e.getMessage());
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, e);
                c.close();
            } catch (Exception ex) {
                try {
                    writeToLogFile(jTextField2.getText()+"/"+currentMediaFile.getName()+".txt","SQLite Database", ex.getMessage());
                } catch (IOException ex1) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }
        }
        jButton2.setEnabled(false);
        jButton4.setEnabled(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        int status = fileChooser.showOpenDialog(rootPane); 
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (status == JFileChooser.APPROVE_OPTION) {
            try {
                if (fileChooser.getSelectedFile().getName().endsWith("db")) {
                    jTextField3.setText(fileChooser.getSelectedFile().getAbsolutePath());
                    jLabel2.setText("You Selected Database : "+currentMediaFile.getAbsolutePath());
                } else {
                    JOptionPane.showMessageDialog(this, "Please select a SQlite Database file only", "Invalid Database File", JOptionPane.ERROR_MESSAGE);
                }
            } catch (HeadlessException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            jLabel2.setText("No file selected");
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void writeToLogFile(String logFilePath, String title, String message) throws FileNotFoundException, IOException{
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        String val = "["+dateFormat.format(new Date())+"]: "+title+" : "+message+"\n"; 
        File tempFile = new File(logFilePath);
        FileOutputStream fos = new FileOutputStream(tempFile,true);
        jTextArea1.append(val);
        fos.write(val.getBytes());
    }
    
    private void fetchFromDB(Connection c) throws SQLException {
        try (Statement stmt = c.createStatement()) {
            ResultSet rs = stmt.executeQuery( "SELECT * FROM X;" );
            jTable1.setModel(buildTableModel(rs));
            rs.close();
        }
    }
    
    public static DefaultTableModel buildTableModel(ResultSet rs) throws SQLException {
        ResultSetMetaData metaData = rs.getMetaData();
        
        // names of columns
        Vector<String> columnNames = new Vector<>();
        int columnCount = metaData.getColumnCount();
        for (int column = 1; column <= columnCount; column++) {
            columnNames.add(metaData.getColumnName(column));
        }

        // data of the table
        Vector<Vector<Object>> data = new Vector<>();
        while (rs.next()) {
            Vector<Object> vector = new Vector<>();
            for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                vector.add(rs.getObject(columnIndex));
            }
            data.add(vector);
        }

        return new DefaultTableModel(data, columnNames);

    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
